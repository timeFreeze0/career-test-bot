generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  telegramId  BigInt        @unique
  firstName   String
  lastName    String
  phoneNumber String
  createdAt   DateTime      @default(now())
  attempts    TestAttempt[]
}

model Profession {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  optionEffects OptionEffect[]
  matches       TestAttempt[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  order   Int
  options Option[]
}

model Option {
  id                Int            @id @default(autoincrement())
  text              String
  order             Int
  professionEffects OptionEffect[]
  question          Question       @relation(fields: [questionId], references: [id])
  questionId        Int
  answers           Answer[]
}

model TestAttempt {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  completedAt  DateTime   @default(now())
  answers      Answer[]
  profession   Profession @relation(fields: [professionId], references: [id])
  professionId Int
}

model Answer {
  id            Int         @id @default(autoincrement())
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
  testAttemptId Int
  option        Option      @relation(fields: [optionId], references: [id])
  optionId      Int
}

model OptionEffect {
  id           Int        @id @default(autoincrement())
  score        Int
  profession   Profession @relation(fields: [professionId], references: [id])
  professionId Int
  option       Option     @relation(fields: [optionId], references: [id])
  optionId     Int
}
